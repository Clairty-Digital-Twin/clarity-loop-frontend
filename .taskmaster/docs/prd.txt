CLARITY LOOP iOS - SWIFTDATA-POWERED HEALTH TRACKING BANGER
===========================================================

PROJECT VISION
--------------
Build a WORLD-CLASS iOS health tracking app that makes users go "HOLY SHIT THIS IS FAST!" 
No loading spinners. Works offline. Real-time updates. SwiftData-powered. 
The backend team gave us the blueprint - now we execute like Steve Jobs would.

CURRENT REALITY CHECK
--------------------
‚úÖ WHAT'S WORKING:
- AWS Amplify auth (PERFECTLY configured!)
- Basic SwiftUI structure
- Backend at https://clarity.novamindnyc.com

‚ùå WHAT'S FUCKED:
- Build errors from duplicate .md files (CRITICAL)
- Debug shit in production (TokenDebugView needs to DIE)
- BackendAPIClient throwing notImplemented everywhere
- NO SwiftData (using stone-age direct API calls)
- NO WebSocket (missing real-time magic)
- NO offline support (app dies without internet)

BACKEND TEAM'S GENIUS ARCHITECTURE
----------------------------------
They gave us 4 BANGER guides in /BANGER_GUIDE/:
1. SwiftData local-first approach (instant UI)
2. Repository pattern (clean AF architecture)
3. WebSocket integration (real-time health updates)
4. Modern iOS 17+ patterns (@Observable everything)

Key Backend Features We're Wrapping:
- PAT Analysis (Pretrained Actigraphy Transformer) 
- Google Gemini AI health insights
- Batch health uploads (max 100 metrics)
- Real-time WebSocket channels
- HIPAA-compliant everything

IMPLEMENTATION PHASES - LET'S FUCKING GO!
-----------------------------------------

PHASE 0: UNFUCK THE BUILD (HOUR 1)
-----------------------------------
CRITICAL - Can't do shit until this works:
- Delete duplicate PULSE_DASHBOARD.md from Xcode
- Remove ALL .md files from app bundle
- Delete Debug tab from MainTabView
- KILL TokenDebugView and DebugAPIView
- Remove token logging (security risk!)
- Fix BackendAPIClient - use Amplify tokens NOT TokenManager

PHASE 1: SWIFTDATA FOUNDATION (DAY 1)
--------------------------------------
Build the local-first foundation:
- Create @Model classes with sync tracking:
  * HealthMetric (timestamp, value, type, syncStatus, localID, remoteID)
  * UserProfile (preferences, settings, lastSync)
  * PATAnalysis (sleep stages, confidence scores)
  * AIInsight (content, timestamp, category)
- Setup ModelContainer in App.swift
- Implement CloudKit support (optional but sexy)
- Create data migration strategy

PHASE 2: REPOSITORY PATTERN (DAY 2)
------------------------------------
Clean architecture like the backend team showed us:
- BaseRepository protocol with CRUD + sync
- HealthRepository (local-first, batch operations)
- UserRepository (profile management)
- PATAnalysisRepository (assessment storage)
- AIInsightRepository (chat history)
- All repositories use @Observable
- Async/await everywhere (no callbacks!)

PHASE 3: MODERN VIEWMODELS (DAY 3)
-----------------------------------
iOS 17+ patterns only:
- ViewState<T> for all async operations
- @Observable ViewModels (kill ObservableObject)
- @MainActor for UI updates
- Proper error handling with recovery
- No more loading spinners - data loads instantly!

PHASE 4: API INTEGRATION (DAYS 4-5)
------------------------------------
Complete the backend wrapper:
- Health data upload (POST /api/v1/health-data/upload)
- PAT analysis endpoints (real-time results!)
- AI insights (Gemini-powered)
- WebSocket integration for live updates
- Proper DTOs matching backend EXACTLY
- Retry logic with exponential backoff
- Offline queue for failed requests

PHASE 5: HEALTHKIT MASTERY (DAYS 6-7)
--------------------------------------
Full HealthKit integration:
- Authorization for ALL health types
- Background delivery (HKObserverQuery)
- Real-time updates when user sleeps/exercises
- Batch sync to backend (max 100 metrics)
- Handle simulator limitations gracefully
- BGProcessingTask for bulk uploads

PHASE 6: UI/UX EXCELLENCE (DAYS 8-10)
--------------------------------------
Make it beautiful:
- Dashboard with SwiftUI Charts
- PAT sleep visualization (hypnogram)
- AI chat interface (like ChatGPT but health)
- Pull-to-refresh EVERYWHERE
- Haptic feedback on actions
- Smooth 60fps animations
- Dark mode perfection

PHASE 7: OFFLINE MAGIC (DAYS 11-12)
------------------------------------
Work without internet:
- Queue all operations when offline
- Sync automatically when online
- Conflict resolution (last-write-wins)
- Show sync status subtly
- Cache everything in SwiftData
- Background sync every 15 minutes

PHASE 8: REAL-TIME FEATURES (DAYS 13-14)
-----------------------------------------
WebSocket wizardry:
- Live PAT analysis updates
- Real-time chat with AI
- Health alert notifications
- Typing indicators
- Connection management
- Auto-reconnect logic

PHASE 9: PRODUCTION POLISH (DAYS 15-16)
----------------------------------------
Ship it like Apple would:
- Biometric authentication
- Certificate pinning
- Jailbreak detection
- Crash reporting (Sentry)
- Analytics (privacy-first)
- App Store assets
- Performance monitoring
- A/B testing framework

TECHNICAL REQUIREMENTS
----------------------
NON-NEGOTIABLE:
- iOS 17.0+ (fuck legacy support)
- SwiftUI 5.0 + SwiftData
- AWS Amplify (already working!)
- Async/await ONLY (no completion handlers)
- @Observable ONLY (no ObservableObject)
- Repository pattern
- Local-first architecture
- HIPAA compliant
- Zero crashes

CODE PRINCIPLES
---------------
Write code like you're at Apple:
- SOLID principles
- DRY but readable
- Testable (80% coverage minimum)
- Self-documenting
- No magic numbers
- Proper error handling
- Memory efficient
- Battery conscious

SUCCESS METRICS
---------------
THE APP MUST:
- Launch in < 1 second
- Work fully offline
- Sync in < 3 seconds
- Never show loading spinners
- Feel native and smooth
- Pass App Store review first try
- Get 5-star reviews
- Make users say "WOW"

DELIVERABLES
------------
1. Production iOS app that works offline
2. Real-time health insights via WebSocket
3. Beautiful PAT sleep analysis
4. AI-powered health chat
5. Comprehensive test suite
6. App Store approved build
7. Happy fucking users

CONSTRAINTS
-----------
- Backend is at https://clarity.novamindnyc.com (DON'T CHANGE)
- Must use AWS Amplify auth (IT'S WORKING)
- Must follow backend API exactly
- Must be HIPAA compliant
- Must work on real devices (not just simulator)

THE MISSION
-----------
The backend team built a BEAUTIFUL API with WebSocket support, AI insights, and PAT analysis.
They documented it perfectly. Now we build an iOS app that makes their backend SHINE.
No half-ass implementations. No "good enough". We build it RIGHT.

Local-first. Offline-capable. Real-time. Beautiful.

This is our chance to show what iOS development should be.

LET'S. FUCKING. BUILD. üöÄ